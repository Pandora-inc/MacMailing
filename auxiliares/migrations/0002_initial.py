# Generated by Django 4.1.3 on 2024-01-03 22:29

from django.db import migrations, models

def setup_contact_types(apps, schema_editor):
    """
    Populates the ContactType model with initial data.

    Parameters:
        apps (object): A reference to the Django apps registry.
        schema_editor (object): A reference to the schema editor.

    Returns:
        None

    Description:
        This function is used to populate the ContactType model with initial data. It takes two parameters: 'apps' and 'schema_editor'. 'apps' is a reference to the Django apps registry, which allows access to the models defined in the application. 'schema_editor' is a reference to the schema editor, which is used to perform database schema operations.

        The function first retrieves the ContactType model using the 'get_model' method of the 'apps' object. It then defines a list of mappings, where each mapping represents a contact type with its name. 

        The function then iterates over the list of mappings and uses the 'update_or_create' method of the ContactType model to either update an existing contact type with the specified name and description, or create a new contact type if it doesn't exist. The name and description of each contact type are set to the value specified in the mapping.

        After all the mappings have been processed, the function returns None.

    Example Usage:
        setup_contact_types(apps, schema_editor)
    """

    contact_type = apps.get_model("auxiliares", "ContactType")

    list_mappings = [
        {'name': 'Work Phone'},
        {'name': 'Mobile'},
        {'name': 'Fax'},
        {'name': 'Home Phone'},
        {'name': 'Pager Number'},
        {'name': 'SMS marketing phone'},
        {'name': 'Other Phone Number'}
    ]

    for mapping in list_mappings:
        contact_type.objects.update_or_create(
        name=mapping['name'],
        description=mapping['name']
    )

def setup_email_types(apps, schema_editor):
    """
    Populates the EmailType model with initial data.

    Parameters:
        apps (object): A Django apps object that allows access to models.
        schema_editor (object): A Django schema_editor object for database schema operations.

    Returns:
        None

    Description:
    This function is used to populate the EmailType model with initial data. It takes two parameters: 'apps' and 'schema_editor'. The 'apps' parameter is a Django apps object that allows access to models. The 'schema_editor' parameter is a Django schema_editor object for database schema operations.

    The function retrieves the EmailType model using the 'apps.get_model' method. It then defines a list of mappings, where each mapping represents the name of an email type. The function iterates over the list of mappings and uses the 'EmailType.objects.update_or_create' method to update or create an EmailType object with the specified name and description.

    Example:
        setup_email_types(apps, schema_editor)
    """

    email_type = apps.get_model("auxiliares", "EmailType")

    list_mappings = [
        {'name': 'Work E-mail'},
        {'name': 'Home E-mail'},
        {'name': 'Newsletters email'},
        {'name': 'Other E-mail'}
    ]

    for mapping in list_mappings:
        email_type.objects.update_or_create(
        name=mapping['name'],
        description=mapping['name']
    )

def setup_social_types(apps, schema_editor):
    """
    Populates the SocialType model with initial data.

    Parameters:
        apps (Apps): The Django Apps registry.
        schema_editor (SchemaEditor): The schema editor.

    Returns:
        None

    Raises:
        None

    Description:
        This function is used to populate the SocialType model with initial data. It takes two parameters: 'apps' and 'schema_editor'. The 'apps' parameter is an instance of the Django Apps registry, which allows access to all the models in the application. The 'schema_editor' parameter is an instance of the Django SchemaEditor, which is used to perform database schema operations.

        The function first retrieves the SocialType model using the 'get_model' method of the 'apps' parameter. It then defines a list of mappings, where each mapping represents a social media account type with its name. 

        The function then iterates over each mapping in the list and uses the 'update_or_create' method of the SocialType model to either update an existing social media account type with the given name and description, or create a new one if it doesn't exist. The 'update_or_create' method takes two arguments: 'name' and 'description', which are extracted from the mapping.

        After all the mappings have been processed, the function returns None.

    Example Usage:
        setup_social_types(apps, schema_editor)
    """

    social_type = apps.get_model("auxiliares", "SocialType")

    list_mappings = [
        {'name': 'Facebook account'},
        {'name': 'Telegram account'},
        {'name': 'VK account'},
        {'name': 'Skype ID'},
        {'name': 'Viber contact'},
        {'name': 'Instagram comments'},
        {'name': 'Bitrix24.Network account'},
        {'name': 'Live Chat'},
        {'name': 'Open Channel account'},
        {'name': 'ICQ Number'},
        {'name': 'MSN/Live!'},
        {'name': 'Jabber'},
        {'name': 'Other Contact'},
        {'name': 'Linked user'}
    ]

    for mapping in list_mappings:
        social_type.objects.update_or_create(
        name=mapping['name'],
        description=mapping['name']
    )

def setup_web_types(apps, schema_editor):
    """
    Populates the WebType model with initial data.

    Parameters:
        apps (object): A Django apps object that allows access to models.
        schema_editor (object): A Django schema editor object.

    Returns:
        None

    Description:
    This function is used to populate the WebType model with initial data. It takes two parameters: 'apps' and 'schema_editor'. The 'apps' parameter is a Django apps object that allows access to models. The 'schema_editor' parameter is a Django schema editor object.

    The function first retrieves the WebType model using the 'apps.get_model' method. It then defines a list of mappings, where each mapping represents a web type with its name. 

    The function then iterates over each mapping in the list and uses the 'WebType.objects.update_or_create' method to either update an existing web type with the same name or create a new web type with the name and description from the mapping.

    This function does not return any value.
    """

    web_type = apps.get_model("auxiliares", "WebType")

    list_mappings = [
        {'name': 'Corporate Website'},
        {'name': 'Personal Page'},
        {'name': 'Facebook Page'},
        {'name': 'VK Page'},
        {'name': 'LiveJournal'},
        {'name': 'Twitter'},
        {'name': 'Other Website'}
    ]

    for mapping in list_mappings:
        web_type.objects.update_or_create(
        name=mapping['name'],
        description=mapping['name']
    )

def setup_countries(apps, schema_editor):
    """
    Populates the Country model with initial data.

    Parameters:
        apps (Apps): The Django Apps registry.
        schema_editor (SchemaEditor): The schema editor.

    Returns:
        None

    Raises:
        None

    Description:
    This function is used to populate the Country model with initial data. It takes two parameters: 'apps' and 'schema_editor'. The 'apps' parameter is an instance of the Django Apps registry, which is used to access the models. The 'schema_editor' parameter is an instance of the schema editor, which is used to perform database operations.

    The function first retrieves the Country model using the 'get_model' method of the 'apps' parameter. It then defines a list of dictionaries, 'list_mappings', which contains the initial data for the Country model. Each dictionary represents a country and contains a 'description' key with the description of the country.

    The function then iterates over the 'list_mappings' list and uses the 'update_or_create' method of the Country model to create or update a country with the given description. This method takes the 'description' key from each dictionary as the value for the 'description' field of the Country model.

    Note that the 'update_or_create' method is used instead of the 'create' method to avoid creating duplicate countries with the same description.

    Example:
        setup_countries(apps, schema_editor)
    """
    country = apps.get_model("auxiliares", "Country")

    list_mappings = [
        {'description': 'United States of America'},
        {'description': 'Argentina'},
        {'description': 'Chile'},
        {'description': 'Peru'},
        {'description': 'Mexico'},
        {'description': 'Uruguay'},
        {'description': 'China'},
        {'description': 'Colombia'},
        {'description': 'Italy'},
        {'description': 'Spain'},
        {'description': 'Israel'},
        {'description': 'Germany'},
        {'description': 'Costa Rica'},
        {'description': 'Korea'},
        {'description': 'Greece'},
        {'description': 'United Kingdom'},
        {'description': 'Bulgaria'},
        {'description': 'Monaco'},
        {'description': 'France'},
        {'description': 'Ecuador'},
        {'description': 'Netherlands'},
        {'description': 'Trinidad and Tobago'},
        {'description': 'Switzerland'},
        {'description': 'Belgium'},
        {'description': 'Dominican Republic'},
        {'description': 'Turkey'},
        {'description': 'Panama'},
        {'description': 'Curazao'},
        {'description': 'Guatemala'},
        {'description': 'Malaysia'},
        {'description': 'Algeria'},
        {'description': 'United States'},
        {'description': 'Canada'}
    ]

    for mapping in list_mappings:
        country.objects.update_or_create(
        description=mapping['description']
    )

def setup_types(apps, schema_editor):
    """
    Populates the Type model with initial data.

    Parameters:
        apps (Apps): The Django Apps registry.
        schema_editor (SchemaEditor): The schema editor.

    Returns:
        None

    Raises:
        None

    Description:
        This function is used to populate the Type model with initial data. It takes two parameters: 'apps' and 'schema_editor'. 'apps' is an instance of the Django Apps registry, which is used to access the Type model. 'schema_editor' is an instance of the schema editor, which is used to perform database operations.

        The function creates a list of mappings, where each mapping represents a type to be added to the Type model. Each mapping contains a 'name' key, which represents the name of the type.

        The function then iterates over the list of mappings and uses the 'update_or_create' method of the Type model to either update an existing type with the same name or create a new type with the specified name and description (which is set to the same value as the name).

        Example:
            setup_types(apps, schema_editor)
    """
    auxiliar_type = apps.get_model("auxiliares", "Type")

    list_mappings = [
        {'name': 'Retailer'},
        {'name': 'Distributor / Wholesaler'},
        {'name': 'Corporation / Private entity'},
        {'name': 'Manufacturer'},
        {'name': 'MQ Prospect'},
        {'name': 'Partner'},
        {'name': 'Government / Public entity'},
        {'name': 'Broker'},
        {'name': 'MQ Client'},
        {'name': 'Hospitality (Hotels)'},
        {'name': 'Hospitality (Cafes/Bakeries)'}
    ]

    for mapping in list_mappings:
        auxiliar_type.objects.update_or_create(
        name=mapping['name'],
        description=mapping['name']
    )


class Migration(migrations.Migration):
    """
    This class represents a Django migration for creating several models and populating them with initial data.

    Attributes:
        initial (bool): Indicates if this is the initial migration for the app.
        dependencies (list): A list of dependencies for this migration.
        operations (list): A list of migration operations to be executed.

    Migration Operations:
        - CreateModel: Creates a new model with the specified fields.
        - RunPython: Executes a Python function to perform custom database operations.

    Models Created:
        - ContactType: Represents different types of contact information.
        - Country: Represents different countries.
        - EmailType: Represents different types of email addresses.
        - SocialType: Represents different types of social media accounts.
        - Type: Represents different types of entities.
        - WebType: Represents different types of websites.

    Functions Executed:
        - setup_contact_types: Populates the ContactType model with initial data.
        - setup_email_types: Populates the EmailType model with initial data.
        - setup_social_types: Populates the SocialType model with initial data.
        - setup_web_types: Populates the WebType model with initial data.
        - setup_countries: Populates the Country model with initial data.
        - setup_types: Populates the Type model with initial data.
    """

    initial = True

    dependencies = [
        ('auxiliares', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ContactType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=32, null=True)),
                ('description', models.CharField(blank=True, max_length=64, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(blank=True, max_length=64, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='EmailType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=32, null=True)),
                ('description', models.CharField(blank=True, max_length=64, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='SocialType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=32, null=True)),
                ('description', models.CharField(blank=True, max_length=64, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Type',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=64, null=True)),
                ('description', models.CharField(blank=True, max_length=64, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='WebType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=32, null=True)),
                ('description', models.CharField(blank=True, max_length=64, null=True)),
            ],

        ),
        migrations.RunPython(setup_contact_types),
        migrations.RunPython(setup_email_types),
        migrations.RunPython(setup_social_types),
        migrations.RunPython(setup_web_types),
        migrations.RunPython(setup_countries),
        migrations.RunPython(setup_types)

    ]
